source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Regular Expression.R', echo=TRUE)
library("gdata", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("gplots", lib.loc="~/R/win-library/3.2")
library("gtable", lib.loc="~/R/win-library/3.2")
library("gtools", lib.loc="~/R/win-library/3.2")
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Regular Expression.R', echo=TRUE)
library("knitr", lib.loc="~/R/win-library/3.2")
library("jsonlite", lib.loc="~/R/win-library/3.2")
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Regular Expression.R', echo=TRUE)
library("extrafontdb", lib.loc="~/R/win-library/3.2")
library("extrafont", lib.loc="~/R/win-library/3.2")
library("formatR", lib.loc="~/R/win-library/3.2")
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Regular Expression.R', echo=TRUE)
library("caTools", lib.loc="~/R/win-library/3.2")
library("bitops", lib.loc="~/R/win-library/3.2")
library("colorspace", lib.loc="~/R/win-library/3.2")
library("dichromat", lib.loc="~/R/win-library/3.2")
library("digest", lib.loc="~/R/win-library/3.2")
library("evaluate", lib.loc="~/R/win-library/3.2")
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Regular Expression.R', echo=TRUE)
library("highr", lib.loc="~/R/win-library/3.2")
library("htmltools", lib.loc="~/R/win-library/3.2")
library("labeling", lib.loc="~/R/win-library/3.2")
library("magrittr", lib.loc="~/R/win-library/3.2")
library("markdown", lib.loc="~/R/win-library/3.2")
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/Regular Expression.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
source('~/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/R_ETL.R', echo=TRUE)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Country Pop 1980-2010.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                      \_/
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
#df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Country Pop 1980-2010.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                      \_/
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
#df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Country Pop 1980-2010.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                      \_/
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
#df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Country Pop 1980-2010.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                      \_/
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
#df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Country_Pop_1980_2010.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                      \_/
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
#df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Oil & Gas 1985-2000.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Oil & Gas 1985-2000.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Months in Production",	"Gas Produced, MCF",	"Water Produced, bbl",	"Reporting Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/DataVisualization/Project 3/01 Data/OilandGas_ETL.R', echo=TRUE)
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Oil & Gas 1985-2000.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 3/01 Data")
file_path <- "Oil & Gas 1985-2000.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Months in Production",	"Gas Produced, MCF",	"Water Produced, bbl",	"Reporting Year")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
source('~/DataVisualization/Project 3/01 Data/DataFrameAnalysis.R', echo=TRUE)
source('~/DataVisualization/Project 3/01 Data/DataFrameAnalysis.R', echo=TRUE)
head(Country)
head(Dow_Jones)
source('~/DataVisualization/Project 3/01 Data/Business_DataFrames.R', echo=TRUE)
source('~/DataVisualization/Project 3/01 Data/Business_DataFrames.R', echo=TRUE)
source('~/DataVisualization/Project 3/01 Data/Business_DataFrames.R', echo=TRUE)
source('~/DataVisualization/Project 3/01 Data/Business_DataFrames.R', echo=TRUE)
require("jsonlite")
require("RCurl")
# Create four data frames for each .csv files
Fortune500 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FORTUNE_500_COMPANIES"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_nar784', PASS='orcl_nar784', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
source('~/DataVisualization/Project 3/01 Data/Business_DataFrames.R', echo=TRUE)
# Create four data frames for each .csv files
Fortune500 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from FORTUNE_500_COMPANIES"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_nar784', PASS='orcl_nar784', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
Oil_Gas <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from OIL_GAS"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_nar784', PASS='orcl_nar784', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
Dow_Jones <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from DOW_JONES"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_nar784', PASS='orcl_nar784', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
Country <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from COUNTRY_POP"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_nar784', PASS='orcl_nar784', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(Country)
dplyr::left_join(Fortune500, Country, by="YEAR") %>% tbl_df
dplyr::left_join(Fortune500, Country, by="YEAR") %>% view
dplyr::left_join(Fortune500, Country, by="YEAR") %>% View
summary(Oil_Gas)
Concise_Oil <- df %>% group_by (YEAR, Gas_Produced_MCF) %>% summarise(production = sum(Gas_Produced_MCF)) %>% tbl_df
Top_5 <- Oil_Gas %>% select(COMPANY, REVENUE_IN_MILLIONS_, PROFIT_IN_MILLIONS_, YEAR, RANK) %>% filter(YEAR %in% c(1955:2000),COMPANY%in%c("DuPont","General Motors","Exxon Mobil","Esmark")) %>% arrange(YEAR) %>% tbl_df
Concise_Oil <- df %>% filter (YEAR, Gas_Produced_MCF) %>% group_by (YEAR, Gas_Produced_MCF) %>% summarise(production = sum(Gas_Produced_MCF)) %>% tbl_df
Concise_Oil <- df %>% filter (YEAR, Gas_Produced_MCF) %>% group_by (YEAR, Gas_Produced_MCF) %>% summarise(production = sum(Gas_Produced_MCF)) %>% tbl_df
Concise_Oil <- Oil_Gas %>% filter (YEAR, Gas_Produced_MCF) %>% group_by (YEAR, Gas_Produced_MCF) %>% summarise(production = sum(Gas_Produced_MCF)) %>% tbl_df
Concise_Oil <- Oil_Gas %>%  group_by (YEAR, Gas_Produced_MCF) %>% summarise(production = sum(Gas_Produced_MCF)) %>% tbl_df
Concise_Oil <- Oil_Gas %>%  group_by (YEAR, COMPANY_NAME) %>% summarise(production = sum(Gas_Produced_MCF)) %>% tbl_df
Concise_Oil <- Oil_Gas %>%  group_by (YEAR, COMPANY_NAME) %>% summarise(production = sum(as.numeric(Gas_Produced_MCF))) %>% tbl_df
Concise_Oil <- Oil_Gas %>%  filter(YEAR, GAS_PRODUCED_MCF, WATER_PRODUCED_BBL, MONTHS_IN_PRODUCTION, COMPANY_NAME) %>% tbl_df
Concise_Oil <- Oil_Gas %>%  filter(YEAR, GAS_PRODUCED_MCF, WATER_PRODUCED_BBL, MONTHS_IN_PRODUCTION, COMPANY_NAME) %>% View
Concise_Oil <- Oil_Gas %>%  filter(YEAR, GAS_PRODUCED_MCF, WATER_PRODUCED_BBL, MONTHS_IN_PRODUCTION, COMPANY_NAME) %>% View
Concise_Oil <- Oil_Gas %>%  filter(YEAR, GAS_PRODUCED_MCF, WATER_PRODUCED_BBL, MONTHS_IN_PRODUCTION, COMPANY_NAME) %>% View
Concise_Oil <- Oil_Gas %>%  filter(YEAR) %>% View
Concise_Oil <- Oil_Gas %>%  filter(YEAR = 1980) %>% View
Concise_Oil <- Oil_Gas %>%  filter(YEAR == 1980) %>% View
Concise_Oil <- Oil_Gas %>%  filter(YEAR == 2000) %>% View
Concise_Oil <- Oil_Gas[,c("A","B","E")]
Concise_Oil <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")]
Concise_Oil
View(Concise_Oil)
Concise_Oil_Gas <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")]
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%tbl_df
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>%  group_by(YEAR,GAS_PRODUCED_MCF) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
dplyr::inner_join(Production, Fortune500, by="YEAR") %>% View
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
coord_cartesian() +
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%tbl_df
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%tbl_df
dplyr::inner_join(Production, Fortune500, by="YEAR") %>% View
Fortune_Gas -> dplyr::inner_join(Production, Fortune500, by="YEAR") %>% View
dplyr::left_join(Dow_Jones, Fortune500, by="YEAR") %>% select(YEAR, Date, Open_, Close_) %>% filter(YEAR %in% c("1950", "1960", "1970", "1980", "1990")), Open_ > 10000, Close_ > 10000) %>% View
dplyr::left_join(Dow_Jones, Fortune500, by="YEAR") %>% select(YEAR, Date, Open_, Close_) %>% filter(YEAR %in% c("1950", "1960", "1970", "1980", "1990")), Open_ > 10000, Close_ > 10000) %>% View
Fortune_Gas -> dplyr::inner_join(Production, Fortune500, by="YEAR") %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(COMPANY, REVENUE_IN_MILLIONS,YEAR) %>% filter(COMPANY %in% c("Exxon Mobil", "Chevron")) %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(COMPANY, REVENUE_IN_MILLIONS_,YEAR) %>% filter(COMPANY %in% c("Exxon Mobil", "Chevron")) %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(COMPANY, REVENUE_IN_MILLIONS_,YEAR) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, REVENUE_IN_MILLIONS_,GAS_PRODUCED_MCF) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, REVENUE_IN_MILLIONS_,GAS_PRODUCED_MCF) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%tbl_df
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, REVENUE_IN_MILLIONS_,gas_prod) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, PROFIT_IN_MILLIONS_,gas_prod) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Production <- Concise_Oil_Gas %>%  group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF) group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF) group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF)%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF)%>%summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF)%>% filter(GAS_PRODUCED_MCF ^ null) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF)%>% filter(GAS_PRODUCED_MCF != null) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF)%>% filter(GAS_PRODUCED_MCF != null) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Concise_Oil_Gas %>% select(YEAR, GAS_PRODUCED_MCF)%>% filter(GAS_PRODUCED_MCF != 'null') %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% select(YEAR, GAS_PRODUCED_MCF)%>% filter(GAS_PRODUCED_MCF != 'null') %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != 'null')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%tbl_df
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)',WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)),water_prod = sum(as.numeric(WATER_PRODUCED_BBL)))%>%View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, PROFIT_IN_MILLIONS_,gas_prod) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(GAS_PRODUCED_MCF)),water_prod = sum(as.numeric(WATER_PRODUCED_BBL)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numas.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(WATER_PRODUCED_BBL)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.num(as.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(WATER_PRODUCED_BBL)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(WATER_PRODUCED_BBL)))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(as.character(WATER_PRODUCED_BBL))))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF")] %>% filter(GAS_PRODUCED_MCF != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(as.character(WATER_PRODUCED_BBL))))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)',GAS_PRODUCED_MCF != null, WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(as.character(WATER_PRODUCED_BBL))))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)',GAS_PRODUCED_MCF != 'null', WATER_PRODUCED_BBL != '(null)')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))),water_prod = sum(as.numeric(as.character(WATER_PRODUCED_BBL))))%>%View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)',GAS_PRODUCED_MCF != 'null')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))))%>%View
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, PROFIT_IN_MILLIONS_,gas_prod) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
Production <- Oil_Gas[,c("YEAR","GAS_PRODUCED_MCF","WATER_PRODUCED_BBL")] %>% filter(GAS_PRODUCED_MCF != '(null)',GAS_PRODUCED_MCF != 'null')%>% group_by(YEAR) %>% summarise(gas_prod = sum(as.numeric(as.character( GAS_PRODUCED_MCF))))%>%tbl_df
Fortune_Gas <- dplyr::inner_join(Production, Fortune500, by="YEAR") %>% select(YEAR, COMPANY, PROFIT_IN_MILLIONS_,gas_prod) %>% filter(COMPANY %in% c("Exxon Mobil", "ChevronTexaco")) %>% View
